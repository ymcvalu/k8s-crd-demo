/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "nfs-controller/pkg/apis/samplecrd/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NFSVolumeLister helps list NFSVolumes.
type NFSVolumeLister interface {
	// List lists all NFSVolumes in the indexer.
	List(selector labels.Selector) (ret []*v1.NFSVolume, err error)
	// NFSVolumes returns an object that can list and get NFSVolumes.
	NFSVolumes(namespace string) NFSVolumeNamespaceLister
	NFSVolumeListerExpansion
}

// nFSVolumeLister implements the NFSVolumeLister interface.
type nFSVolumeLister struct {
	indexer cache.Indexer
}

// NewNFSVolumeLister returns a new NFSVolumeLister.
func NewNFSVolumeLister(indexer cache.Indexer) NFSVolumeLister {
	return &nFSVolumeLister{indexer: indexer}
}

// List lists all NFSVolumes in the indexer.
func (s *nFSVolumeLister) List(selector labels.Selector) (ret []*v1.NFSVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NFSVolume))
	})
	return ret, err
}

// NFSVolumes returns an object that can list and get NFSVolumes.
func (s *nFSVolumeLister) NFSVolumes(namespace string) NFSVolumeNamespaceLister {
	return nFSVolumeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NFSVolumeNamespaceLister helps list and get NFSVolumes.
type NFSVolumeNamespaceLister interface {
	// List lists all NFSVolumes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.NFSVolume, err error)
	// Get retrieves the NFSVolume from the indexer for a given namespace and name.
	Get(name string) (*v1.NFSVolume, error)
	NFSVolumeNamespaceListerExpansion
}

// nFSVolumeNamespaceLister implements the NFSVolumeNamespaceLister
// interface.
type nFSVolumeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NFSVolumes in the indexer for a given namespace.
func (s nFSVolumeNamespaceLister) List(selector labels.Selector) (ret []*v1.NFSVolume, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NFSVolume))
	})
	return ret, err
}

// Get retrieves the NFSVolume from the indexer for a given namespace and name.
func (s nFSVolumeNamespaceLister) Get(name string) (*v1.NFSVolume, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nfsvolume"), name)
	}
	return obj.(*v1.NFSVolume), nil
}
